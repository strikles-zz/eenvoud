var $ = window.jQuery;

var Wave = function(options)
{
    this.canvas;
    this.context;
    this.wave1 = [];
    this.wave2 = [];
    this.wave3 = [];
    this.mouse = { x: innerWidth * 0.5, y: innerHeight * 0.5 };
    this.angle = 0;
    this.mouseDown = true;
    this.interactive = true;
    this.FPS = 60;
}

Wave.prototype = {

    /*
     * Init.
     */
    init: function() {

        var self = this;

        self.canvas = document.createElement('canvas');
        self.canvas.width = innerWidth;
        self.canvas.height = innerHeight;

        self.canvas.style.position = 'absolute';
        self.canvas.style.top = 0;
        self.canvas.style.bottom = 0;
        self.canvas.style.left = 0;
        self.canvas.style.right = 0;
        self.canvas.style.zIndex = -1;
        self.canvas.style.cursor = 'n-resize';

        $('.main-content').append(self.canvas);

        // Browser supports canvas?
        if(self.capable()) {

            self.context = self.canvas.getContext('2d');
            // Events
            if('ontouchmove' in window) {
                self.canvas.addEventListener('touchstart', self.onTouchStart, false);
                self.canvas.addEventListener('touchend', self.onTouchEnd, false);
                self.canvas.addEventListener('touchmove', self.onTouchMove, false);
            }
            else {
                self.canvas.addEventListener('mousedown', self.onMouseDown, false);
                self.canvas.addEventListener('mouseup', self.onMouseUp, false);
                self.canvas.addEventListener('mousemove', self.onMouseMove, false);
            }

            window.onresize = self.onResize;
            self.createWaves();
        }

        else {
            console.error('Please, update your browser for seeing this animation.');
        }

    },

    /*
     * Checks if browser supports canvas element.
     */
    capable: function() {
        var self = this;

        return self.canvas.getContext && self.canvas.getContext('2d');
    },

    /*
     * On resize window event.
     */
    onResize: function() {
        var self = this;

        self.canvas.width = window.innerWidth;
        self.canvas.height = window.innerHeight;
    },

    /*
     * Mouse down event.
     */
    onMouseDown: function(event) {
        var self = this;

        event.preventDefault();
        self.mouseDown = true;
    },

    /*
     * Mouse up event.
     */
    onMouseUp: function(event) {
        var self = this;

        event.preventDefault();
        self.mouseDown = false;
    },

    /*
     * Mouse move event.
     */
    onMouseMove: function(event) {
        var self = this;

        event.preventDefault();
        self.mouse.x = event.pageX - self.canvas.offsetLeft;
        self.mouse.y = event.pageY - self.canvas.offsetTop;

        if(self.interactive) {
            self.mouseDown = self.interactive = false;
        }
    },

    /*
     * Touch start event.
     */
    onTouchStart: function(event) {
        var self = this;

        event.preventDefault();
        self.mouseDown = true;
    },

    /*
     * Touch end event.
     */
    onTouchEnd: function(event) {
        var self = this;

        event.preventDefault();
        self.mouseDown = false;
    },

    /*
     * Touch move event.
     */
    onTouchMove: function(event) {
        var self = this;

        event.preventDefault();
        self.mouse.x = event.touches[0].pageX - self.canvas.offsetLeft;
        self.mouse.y = event.touches[0].pageY - self.canvas.offsetTop;

        if(interactive) {
            self.mouseDown = self.interactive = false;
        }
    },

    /*
     * Create waves.
     */
    createWaves: function() {
        var self = this;

        var totalPoints = Math.round(self.canvas.width / 170);
        for(var quantity = 0, len = totalPoints; quantity < len; quantity++)
        {
            // First wave
            self.wave1.push({

                x: self.canvas.width * quantity / (len - 1),
                y: self.canvas.height * 0.5 - 20,
                vy: Math.random() * 10,

                depth: self.canvas.height * 0.5

            });
        }
        for(var quantity = 0, len = totalPoints; quantity < len; quantity++)
        {
            // Second wave
            self.wave2.push({

                x: self.canvas.width * quantity / (len - 1),
                y: self.canvas.height * 0.5,
                vy: Math.random() * 10,

                depth: self.canvas.height * 0.5

            });
        }
        for(var quantity = 0, len = totalPoints; quantity < len; quantity++)
        {
            // Third wave
            self.wave3.push({

                x: self.canvas.width * quantity / (len - 1),
                y: self.canvas.height * 0.5 + 20,
                vy: Math.random() * 10,
                depth: self.canvas.height * 0.5

            });
        }

        self.wave();
    },

    /*
     * Loop logic.
     */
    wave: function() {
        var self = this;

        self.clear();
        self.update();
        self.render();
        self.requestAnimFrame(self.wave);
    },

    /*
     * Clear the whole screen.
     */
    clear: function() {
        var self = this;
        self.context.clearRect(0, 0, innerWidth, innerHeight);
    },

    /*
     * Update the waves.
     */
    update: function() {
        var self = this;

        var ease, friction, threshold;
        friction = 0.99;
        threshold = self.interactive ? Math.round(self.canvas.width / 4.5) : 280;

        if(self.interactive) {
            self.angle += 0.05;
            self.mouse.x = self.canvas.width * 0.5 + Math.sin(self.angle) * self.canvas.width * 0.2;
            self.mouse.y = (self.canvas.height * 0.5 - 50) + Math.sin(self.angle) * self.canvas.height * 0.2;
        }

        for(var index = 0; index < (self.wave1.length || self.wave2.length || self.wave3.length); index++) {

            var point1 = self.wave1[index];
            var point2 = self.wave2[index];
            var point3 = self.wave3[index];

            point1.y += point1.vy;
            point2.y += point2.vy;
            point3.y += point3.vy;

            // Ease
            point1.vy += (point1.depth - point1.y) * (self.interactive ? 0.03 : 0.009);
            point2.vy += (point2.depth - point2.y) * (self.interactive ? 0.02 : 0.008);
            point3.vy += (point3.depth - point3.y) * (self.interactive ? 0.01 : 0.007);

            // Friction
            point1.vy *= friction;
            point2.vy *= friction;
            point3.vy *= friction;

            // Threshold
            if(self.distanceTo(self.mouse, point1) < threshold && self.mouseDown) {
                point1.vy += (self.mouse.y - point1.y) * (self.interactive ? 0.03 : 0.009);
            }

            if(self.distanceTo(self.mouse, point2) < threshold && self.mouseDown) {
                point2.vy += (self.mouse.y - point2.y) * (self.interactive ? 0.02 : 0.008);
            }

            if(self.distanceTo(self.mouse, point3) < threshold && self.mouseDown) {
                point3.vy += (self.mouse.y - point3.y) * (self.interactive ? 0.01 : 0.007);
            }

        }

    },

    /*
     * Render the waveS.
     */
    render: function() {
        var self = this;

        for(var wave = 0; wave < (self.wave1.length || self.wave2.length || self.wave3.length); self.wave++) {

            // Smooth bezier curves
            self.clear();

            self.context.save();
            self.context.globalAlpha = 0.5;
            self.context.fillStyle = '#f98f00';
            self.context.beginPath();
            self.context.moveTo(self.wave1[0].x, self.wave1[0].y);

            // Draw through N wave1
            for(var N = 1; N < self.wave1.length - 2; N++) {
                var xc = (self.wave1[N].x + self.wave1[N + 1].x) / 2;
                var yc = (self.wave1[N].y + self.wave1[N + 1].y) / 2;
                self.context.quadraticCurveTo(self.wave1[N].x, self.wave1[N].y, xc, yc);
            }

            self.context.quadraticCurveTo(self.wave1[self.wave1.length - 2].x, self.wave1[self.wave1.length - 2].y, self.wave1[self.wave1.length - 1].x, self.wave1[self.wave1.length - 1].y);
            self.context.lineTo(self.canvas.width, self.canvas.height);
            self.context.lineTo(0, self.canvas.height);
            self.context.lineTo(0, self.wave1[0].y);
            self.context.fill();
            self.context.restore();

            self.context.save();
            self.context.globalAlpha = 0.5;
            self.context.fillStyle = '#00fddc';
            self.context.beginPath();
            self.context.moveTo(self.wave2[0].x, self.wave2[0].y);

            // Draw through N wave2
            for(var N = 1; N < self.wave2.length - 2; N++) {
                var xc = (self.wave2[N].x + self.wave2[N + 1].x) / 2;
                var yc = (self.wave2[N].y + self.wave2[N + 1].y) / 2;
                self.context.quadraticCurveTo(self.wave2[N].x, self.wave2[N].y, xc, yc);
            }

            self.context.quadraticCurveTo(self.wave2[self.wave2.length - 2].x, self.wave2[self.wave2.length - 2].y, self.wave2[self.wave2.length - 1].x, self.wave2[self.wave2.length - 1].y);
            self.context.lineTo(self.canvas.width, self.canvas.height);
            self.context.lineTo(0, self.canvas.height);
            self.context.lineTo(0, self.wave2[0].y);
            self.context.fill();
            self.context.restore();

            self.context.save();
            self.context.globalAlpha = 0.5;
            self.context.fillStyle = '#05cdf8';
            self.context.beginPath();
            self.context.moveTo(self.wave3[0].x, self.wave3[0].y);

            // Draw through N wave3
            for(var N = 1; N < self.wave3.length - 2; N++) {
                var xc = (self.wave3[N].x + self.wave3[N + 1].x) / 2;
                var yc = (self.wave3[N].y + self.wave3[N + 1].y) / 2;
                self.context.quadraticCurveTo(self.wave3[N].x, self.wave3[N].y, xc, yc);
            }

            self.context.quadraticCurveTo(self.wave3[self.wave3.length - 2].x, self.wave3[self.wave3.length - 2].y, self.wave3[self.wave3.length - 1].x, self.wave3[self.wave3.length - 1].y);
            self.context.lineTo(self.canvas.width, self.canvas.height);
            self.context.lineTo(0, self.canvas.height);
            self.context.lineTo(0, self.wave3[0].y);
            self.context.fill();
            self.context.restore();

        }
    },

    /*
     * Distance between two wave1.
     */
    distanceTo: function(pointA, pointB) {

        var dx = Math.abs(pointA.x - pointB.x);
        var dy = Math.abs(pointA.y - pointB.y);

        return Math.sqrt(dx * dx + dy * dy);

    },

    /*
     * Request new frame by Paul Irish.
     * 60 FPS.
     */
    requestAnimFrame: (function() {
        var self = this;

        return  window.requestAnimationFrame       ||
                window.webkitRequestAnimationFrame ||
                window.mozRequestAnimationFrame    ||
                window.oRequestAnimationFrame      ||
                window.msRequestAnimationFrame     ||

                function(callback) {

                    window.setTimeout(callback, 1000 / self.FPS);

                };

    })()

    //window.addEventListener ? window.addEventListener('load', init, false) : window.onload = init;

};

module.exports = new Wave();
